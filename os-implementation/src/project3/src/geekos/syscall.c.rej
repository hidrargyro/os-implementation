--- ./syscall.c	2005-02-07 17:21:18.000000000 -0300
+++ /home/jorge/Documents/GeekOsMoisset/os-implementation/src/project2/src/geekos/syscall.c	2011-05-11 08:27:24.770823002 -0300
@@ -47,7 +48,11 @@
  */
 static int Sys_Exit(struct Interrupt_State* state)
 {
-    TODO("Exit system call");
+    Enable_Interrupts();
+    Detach_User_Context(g_currentThread);
+    Disable_Interrupts();
+    Exit(state->ebx);
+    return 0;
 }
 
 /*
@@ -59,7 +64,26 @@
  */
 static int Sys_PrintString(struct Interrupt_State* state)
 {
-    TODO("PrintString system call");
+    char *message = NULL;
+    ulong_t len = state->ecx;
+
+    if (len > 1024){
+        return -1;
+    }
+
+    message = Malloc(sizeof(char) * len + 1);
+    if (message == NULL) {
+        return -1;
+    }
+
+    if (!Copy_From_User(message, state->ebx, len)) {
+        Free(message);
+        return -1;
+    }
+
+    Put_Buf(message, len);
+    Free(message);
+    return 0;
 }
 
 /*
@@ -71,7 +95,8 @@
  */
 static int Sys_GetKey(struct Interrupt_State* state)
 {
-    TODO("GetKey system call");
+    int keyCode = Wait_For_Key();
+    return keyCode;
 }
 
 /*
@@ -82,7 +107,8 @@
  */
 static int Sys_SetAttr(struct Interrupt_State* state)
 {
-    TODO("SetAttr system call");
+    Set_Current_Attr(state->ebx);
+    return 0;
 }
 
 /*
@@ -94,7 +120,15 @@
  */
 static int Sys_GetCursor(struct Interrupt_State* state)
 {
-    TODO("GetCursor system call");
+    int r=0, c=0;
+    Get_Cursor(&r, &c);
+    if (!Copy_To_User(state->ebx, &r, sizeof(int))) {
+        return -1;
+    }
+    if (!Copy_To_User(state->ecx, &c, sizeof(int))) {
+        return -1;
+    }
+    return 0;
 }
 
 /*
@@ -106,7 +140,10 @@
  */
 static int Sys_PutCursor(struct Interrupt_State* state)
 {
-    TODO("PutCursor system call");
+    if (Put_Cursor(state->ebx, state->ecx))
+        return 0;
+    else
+        return -1;
 }
 
 /*
@@ -120,7 +157,54 @@
  */
 static int Sys_Spawn(struct Interrupt_State* state)
 {
-    TODO("Spawn system call");
+    int retVal = -1;
+    char *exeName = NULL;
+    char *command = NULL;
+    ulong_t exeNameLen = state->ecx + 1; /* +1 to add the 0 NULL later */
+    ulong_t commandLen = state->esi + 1; /* +1 to add the 0 NULL later */
+    struct Kernel_Thread* kthread = NULL;
+
+    /* get some memory for the exe name and the args */
+    exeName = (char*) Malloc(exeNameLen);
+    if (exeName == NULL)
+        goto memfail;
+    command = (char*) Malloc(commandLen);
+    if (command == NULL)
+        goto memfail;
+
+    memset(exeName, '\0', exeNameLen);
+    if(!Copy_From_User(exeName, state->ebx, exeNameLen)){
+        retVal = EUNSPECIFIED;
+        goto fail;
+    }
+    memset(command, '\0', commandLen);
+    if(!Copy_From_User(command, state->edx, commandLen)) {
+        retVal = EUNSPECIFIED;
+        goto fail;
+    }
+
+    Enable_Interrupts();
+    if ((retVal = Spawn(exeName, command, &kthread))) {
+        goto fail;
+    }
+    Disable_Interrupts();
+
+    if (exeName!=NULL)
+        Free(exeName);
+    if (command!=NULL)
+        Free(command);
+
+    return kthread->pid;
+
+memfail:
+    retVal = ENOMEM;
+
+fail:
+    if(exeName)
+        Free(exeName);
+    if (command)
+        Free(command);
+    return retVal;
 }
 
 /*
@@ -132,7 +216,16 @@
  */
 static int Sys_Wait(struct Interrupt_State* state)
 {
-    TODO("Wait system call");
+    int exit_code = -1;
+    struct Kernel_Thread *kthread = Lookup_Thread(state->ebx);
+    if (kthread==NULL)
+        return -1;
+
+    Enable_Interrupts();
+    exit_code = Join(kthread);
+    Disable_Interrupts();
+
+    return exit_code;
 }
 
 /*
@@ -143,7 +236,7 @@
  */
 static int Sys_GetPID(struct Interrupt_State* state)
 {
-    TODO("GetPID system call");
+    return g_currentThread->pid;
 }
 
 
